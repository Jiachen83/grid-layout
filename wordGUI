import java.awt.Container;
import java.awt.GridLayout;
import java.awt.TextArea;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Iterator;
import java.util.Scanner;
import java.util.SortedMap;
import java.util.TreeMap;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;

//chen jia
public class WordGUI extends JFrame implements ActionListener{
	static JFrame WordGUI;
	static TextArea myTextAreaA,myTextAreaE,myTextAreaI,myTextAreaO,myTextAreaOther,myTextAreaU;
	static Scanner check;
	static WordTree JJ,SS;
	static String haha;
	static File FE;
	static JMenuBar menuBar;
	static JMenu fileMenu,fileMenuN;
	
	public WordGUI(){
		JMenuBar menuBar  = new JMenuBar();
		   JMenu fileMenu = new JMenu("File");
		   JMenuItem item;
		   item = new JMenuItem("Open"); 
		   item.addActionListener(this);
		   fileMenu.add( item );
		   fileMenu.addSeparator(); 
		   item = new JMenuItem("Quit"); 
		   item.addActionListener(this);
		   fileMenu.add( item );
		   fileMenuN = new JMenu("Edit");
		   item = new JMenuItem("Add Word"); 
		   item.addActionListener(this);
		   fileMenuN.add( item );
		   setJMenuBar(menuBar);
		   menuBar.add(fileMenu);
		   menuBar.add(fileMenuN);
		  	this.setSize(400, 200);
		  	this.setLocation(100, 100);
		  	this.setTitle("project4");
		  	this.setLayout(new GridLayout(2,3));
		  	this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		  	this.setVisible(true);	
	}
	
	public void actionPerformed(ActionEvent event) {
	      String  menuName;
	      menuName = event.getActionCommand();
	      if (menuName.equals("Open")) {
	    	  JFileChooser chooser = new JFileChooser("./");
	    	  switch(chooser.showOpenDialog(null)) {
	    	  case  JFileChooser.APPROVE_OPTION:
	    		  FE=chooser.getSelectedFile();	    	  
	    		  }
	    	  JJ = new WordTree();
	      try {
			check = new Scanner(FE);
		} catch (FileNotFoundException e) {
			System.out.println("NO FIle Selected");
			System.exit(0);
			
		}
	      while(check.hasNextLine()) {
	    	  haha=check.next();//the first line of FE
	    	 try { 
	    		 Word TTT= new Word(haha);
	    	  JJ.put(TTT);//method of class
			} 
	    	 catch (IllegalWordException e) {
				System.out.println(e.getMessage());
			}
	    	  
	      }
	      print(JJ.getmap());
	      check.close();
	      }
	      else if (menuName.equals("Quit"))
	    	  
	         System.exit(0);
	      else if (menuName.equals("Add Word")) {
	    	  haha=JOptionPane.showInputDialog(null,"Enter your word");
	    	  SS= new WordTree();
	    	  try {
				Word R= new Word(haha);
				SS.put(R);
			} catch (IllegalWordException e) {
				System.out.println(e.getMessage());
			}
	    	  add(SS.getmap());
	      }
	      
	   }
	public void add(SortedMap<Word,Word> Map) {
	    Iterator i = Map.keySet().iterator(); // addword letter word will store in right grid
	    while(i.hasNext()) {
	        haha = i.next().toString(); 
	        switch(haha.charAt(0))  { 
	        case 'a':case 'A': myTextAreaA.append(haha+" " + "\n"); break; 
	        case 'e':case 'E': myTextAreaE.append(haha+" " + "\n"); break; 
	        case 'i':case 'I': myTextAreaI.append(haha+" " + "\n"); break; 
	        case 'o':case 'O': myTextAreaO.append(haha+" " + "\n"); break;
	        case 'u':case 'U': myTextAreaU.append(haha+" " + "\n"); break; 
	        default: myTextAreaOther.append(haha+" " + "\n");break; 

	            } 
	        
	    }
	}

			
		
	public void print (SortedMap<Word,Word> Map) {
		  Container myContentPane = this.getContentPane();
		   myTextAreaA = new TextArea();
		   myTextAreaE = new TextArea();
		   myTextAreaI = new TextArea();
		  myTextAreaO = new TextArea();
		  myTextAreaU = new TextArea();
		   myTextAreaOther = new TextArea();
		  myContentPane.add(myTextAreaA);
		  myContentPane.add(myTextAreaE);
		  myContentPane.add(myTextAreaI);
		  myContentPane.add(myTextAreaO);
		  myContentPane.add(myTextAreaU);
		  myContentPane.add(myTextAreaOther);
		  Iterator it =Map.keySet().iterator();//map need set iterator to begin the loop and while function
		  //require
		  while(it.hasNext()) {
			  haha = it.next().toString();
				if(haha.charAt(0)=='e'||haha.charAt(0)=='E') {myTextAreaE.append(haha+" "+"\n");
				}
				else if(haha.charAt(0)=='a'||haha.charAt(0)=='A') {myTextAreaA.append(haha+" "+"\n");
				}
				else if(haha.charAt(0)=='i'||haha.charAt(0)=='I') {myTextAreaI.append(haha+" "+"\n");}
				else if(haha.charAt(0)=='u'||haha.charAt(0)=='U') {myTextAreaU.append(haha+" "+"\n");}
				else if(haha.charAt(0)=='o'||haha.charAt(0)=='O') {myTextAreaO.append(haha+" "+"\n");}
				else myTextAreaOther.append(haha+" "+"\n");
				;
	}
		  this.setVisible(true);//2 times
	  
	
      
	}		
}
